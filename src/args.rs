
use clap::*;


const TTL_HELP: &str = "TTL: `12 years 15days 2min 2s` / `2018-01-01T12:53:00Z` / `2018-01-01 12:53:00`";


pub fn build_cli() -> App<'static, 'static> {
    let key = Arg::with_name("key")
        .help("Key name")
        .required(true);

    let value = Arg::with_name("value")
        .help("Value")
        .required(false);

    let ttl = Arg::with_name("ttl")
        .short("t")
        .long("ttl")
        .help(TTL_HELP)
        .takes_value(true);

    app_from_crate!()
        .arg(Arg::with_name("database-name")
             .help("Database name")
             .required(true))
        .subcommand(SubCommand::with_name("has")
                    .alias("h")
                    .about("This command succeeds, if the key is found")
                    .arg(key.clone()))
        .subcommand(SubCommand::with_name("get")
                    .alias("g")
                    .about("Get the value")
                    .arg(key.clone())
                    .arg(Arg::with_name("default")
                         .help("Print this if the value is empty")
                         .required(false)))
        .subcommand(SubCommand::with_name("set")
                    .alias("s")
                    .about("Set the value")
                    .arg(ttl.clone())
                    .arg(key.clone())
                    .arg(value.clone()))
        .subcommand(SubCommand::with_name("inc")
                    .alias("i")
                    .about("Increment the value")
                    .arg(ttl.clone())
                    .arg(key.clone())
                    .arg(value.clone()))
        .subcommand(SubCommand::with_name("dec")
                    .alias("i")
                    .about("Increment the value")
                    .arg(ttl.clone())
                    .arg(key.clone())
                    .arg(value.clone()))
        .subcommand(SubCommand::with_name("unset")
                    .alias("i")
                    .alias("remove")
                    .about("Unset")
                    .arg(key.clone()))
        .subcommand(SubCommand::with_name("check")
                    .alias("c")
                    .about("`has` and `set`")
                    .arg(ttl.clone())
                    .arg(key.clone())
                    .arg(value.clone()))
        .subcommand(SubCommand::with_name("swap")
                    .alias("c")
                    .about("`has` and `set`")
                    .arg(ttl.clone())
                    .arg(key.clone())
                    .arg(value))
        .subcommand(SubCommand::with_name("import")
                    .about("Import from *.sqlite")
                    .arg(Arg::with_name("filepath")
                         .help("*.sqlite file which hugo created")
                         .required(true)))
        .subcommand(SubCommand::with_name("shell")
                    .about("Open SQLite shell or execute SQLite command")
                    .arg(Arg::with_name("command")
                         .help("SQLite command")
                         .min_values(0)))
        .subcommand(SubCommand::with_name("ttl")
                    .alias("s")
                    .about("Set the value")
                    .arg(key)
                    .arg(ttl))
        .subcommand(SubCommand::with_name("gc")
                    .about("Vacuum and remove expired items"))

}
